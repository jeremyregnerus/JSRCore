<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JSR.BaseClassLibrary</name>
    </assembly>
    <members>
        <member name="T:JSR.BaseClassLibrary.BaseClass">
            <summary>
            Core base object includes, <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, <see cref="T:System.ComponentModel.IChangeTracking"/> and <see cref="T:JSR.BaseClassLibrary.IMessenger"/>.
            </summary>
        </member>
        <member name="E:JSR.BaseClassLibrary.BaseClass.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:JSR.BaseClassLibrary.BaseClass.OnMessage">
            <inheritdoc/>
        </member>
        <member name="E:JSR.BaseClassLibrary.BaseClass.OnChanged">
            <inheritdoc/>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseClass.IsChanged">
            <inheritdoc/>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseClass.Message">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.AcceptChanges">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.SetValue``1(``0,``0@,System.String)">
            <summary>
            Sets the value for a property.
            </summary>
            <typeparam name="T">Type of value to set.</typeparam>
            <param name="value">Value to assign to the property.</param>
            <param name="backingField">Backingfield that stores the property's value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>True if the value was changed. This will return false if the values are the same.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.AddChildNotifications``1(``0)">
            <summary>
            Adds notification tracking for <see cref="T:JSR.BaseClassLibrary.INotifyChanged"/> and <see cref="T:JSR.BaseClassLibrary.IMessenger"/> child object.
            </summary>
            <typeparam name="T">Type of object to watch for notifications.</typeparam>
            <param name="child">Child object to watch for notifications.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.RemoveChildNotifications``1(``0)">
            <summary>
            Removes notification tracking for <see cref="T:JSR.BaseClassLibrary.INotifyChanged"/> and <see cref="T:JSR.BaseClassLibrary.IMessenger"/> child objects.
            </summary>
            <typeparam name="T">Type of object to no longer watch for notifications.</typeparam>
            <param name="child">Child object to no longer watch for notifications.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.NotifyAllPropertiesChanged">
            <summary>
            Raises the <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> for ever property within the object.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.NotifyPropertiesChanged(System.String[])">
            <summary>
            Raise the <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> for multiple properties.
            </summary>
            <param name="propertyNames">Array of property names to raise the event handler.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.NotifyPropertiesChanged(System.Collections.Generic.List{System.String})">
            <summary>
            Raise the <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> for multiple properties.
            </summary>
            <param name="propertyNames">List of property names to raise the event handlder.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.NotifyPropertyChanged(System.String)">
            <summary>
            Raise the <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/>.
            </summary>
            <param name="propertyName">Property name to raise the event handler.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.OnChildChanged(System.Object,System.Boolean)">
            <summary>
            Changes the <see cref="P:JSR.BaseClassLibrary.BaseClass.IsChanged"/> state of this object when a child raises <see cref="E:JSR.BaseClassLibrary.BaseClass.OnChanged"/>.
            </summary>
            <param name="sender">Object raising <see cref="T:JSR.BaseClassLibrary.OnChangedEventHandler"/>.</param>
            <param name="wasChanged">True if the object was changed, false otherwise.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseClass.OnChildMessage(System.Object,System.String)">
            <summary>
            Changes the Message of this object when a child raises <see cref="E:JSR.BaseClassLibrary.BaseClass.OnMessage"/>.
            </summary>
            <param name="sender">Object raising <see cref="T:JSR.BaseClassLibrary.OnMessageEventHandler"/>.</param>
            <param name="message">Message the child raised.</param>
        </member>
        <member name="T:JSR.BaseClassLibrary.BaseCollection`1">
            <summary>
            Collection of objects that can track <see cref="E:JSR.BaseClassLibrary.BaseCollection`1.OnChanged"/> and <see cref="E:JSR.BaseClassLibrary.BaseCollection`1.OnMessage"/>.
            </summary>
            <typeparam name="T">Type of object within the Collection.</typeparam>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseCollection`1"/> class.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseCollection`1"/> class.
            </summary>
            <param name="collection"><see cref="T:System.Collections.IEnumerable"/> of the list type.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseCollection`1"/> class.
            </summary>
            <param name="list"><see cref="T:System.Collections.IList"/> of the list type.</param>
        </member>
        <member name="E:JSR.BaseClassLibrary.BaseCollection`1.OnMessage">
            <inheritdoc/>
        </member>
        <member name="E:JSR.BaseClassLibrary.BaseCollection`1.OnChanged">
            <inheritdoc/>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseCollection`1.IsChanged">
            <inheritdoc/>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseCollection`1.Message">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseCollection`1.AcceptChanges">
            <inheritdoc/>
        </member>
        <member name="T:JSR.BaseClassLibrary.BaseNode`1">
            <summary>
            Node / Tree structure for managing objects.
            </summary>
            <typeparam name="T">Type of object contained in this Node within the Item property.</typeparam>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseNode`1"/> class.
            </summary>
            <param name="item">Item contained within this node.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.#ctor(`0,JSR.BaseClassLibrary.INode{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseNode`1"/> class.
            </summary>
            <param name="item">Item contained within this node.</param>
            <param name="parent">Parent Node of this Node.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.#ctor(`0,System.Collections.Generic.IEnumerable{JSR.BaseClassLibrary.INode{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseNode`1"/> class.
            </summary>
            <param name="item">Item contained within this node.</param>
            <param name="children">Children Nodes of this Node.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.#ctor(`0,JSR.BaseClassLibrary.INode{`0},System.Collections.Generic.IEnumerable{JSR.BaseClassLibrary.INode{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.BaseNode`1"/> class.
            </summary>
            <param name="item">Item contained within this node.</param>
            <param name="parent">Parent Node of this Node.</param>
            <param name="children">Children Nodes of this Node.</param>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this is a root Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.Item">
            <summary>
            Gets or sets the Item managed by this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.Children">
            <summary>
            Gets a list of child Nodes within this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.Parent">
            <summary>
            Gets or sets the Parent to this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.HasChildren">
            <summary>
            Gets a value indicating whether this Node has Child components.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.BaseNode`1.Root">
            <summary>
            Gets the Root node for the tree that this Node is contained within.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.AddChild(`0,System.Boolean)">
            <summary>
            Adds a new child Node with an Item to the Children collection.
            </summary>
            <param name="item">The Item object within the new Child Node.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.AddChild(JSR.BaseClassLibrary.INode{`0},System.Boolean)">
            <summary>
            Add a Child Node to the Children collection.
            </summary>
            <param name="node">Child Node to add to the Children collection.</param>
            <param name="unique">Only add if the item does not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Add multiple items to the Children collection.
            </summary>
            <param name="items">Items to add.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.AddRange(System.Collections.Generic.IEnumerable{JSR.BaseClassLibrary.INode{`0}},System.Boolean)">
            <summary>
            Add multiple nodes to the Children collection.
            </summary>
            <param name="nodes">Nodes to add.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.GetCount(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the number of children.
            </summary>
            <param name="recursive">Include all ancestors.</param>
            <param name="unique">Only get the number of unique Items.</param>
            <param name="fromRoot">Get the value from the Root Node.</param>
            <returns>Number of children.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.GetCopy(JSR.BaseClassLibrary.INode{`0},System.Boolean)">
            <summary>
            Gets a new copy of this node.
            </summary>
            <param name="parent">The new parent to assign to the copy.</param>
            <param name="withChildren">Whether the node should come with copies of its children.</param>
            <returns>A copy of this node.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.GetItems(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get a list of the Items in this Node.
            </summary>
            <param name="recursive">Get all ancestor items.</param>
            <param name="unique">Only get one instance of each item.</param>
            <param name="fromRoot">Get items from the Root of this Node's tree.</param>
            <returns>A list of Items in the Node.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.BaseNode`1.ItemExists(`0,System.Boolean,System.Boolean)">
            <summary>
            Checks if the items already exists within the tree.
            </summary>
            <param name="item">Item to evaluate.</param>
            <param name="recursive">Check all ancestors.</param>
            <param name="fromRoot">Start from the Root Node.</param>
            <returns>True if the item exists.</returns>
        </member>
        <member name="T:JSR.BaseClassLibrary.DelegateCommand">
            <summary>
            Provides a default implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface for use within MVVM and WPF.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.DelegateCommand"/> class.
            </summary>
            <param name="exectute">Action to execute.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.DelegateCommand"/> class.
            </summary>
            <param name="execute">Action to execute.</param>
            <param name="canExecute">Function specifying if this action can execute when called.</param>
        </member>
        <member name="E:JSR.BaseClassLibrary.DelegateCommand.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:JSR.BaseClassLibrary.DelegateCommandParam">
            <summary>
            Provides a default implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface for use within MVVM and WPF that utilizes a parameter.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommandParam.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.DelegateCommandParam"/> class.
            </summary>
            <param name="execute">Action to execute.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommandParam.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:JSR.BaseClassLibrary.DelegateCommandParam"/> class.
            </summary>
            <param name="execute">Action to execute.</param>
            <param name="canExecute">Function specifying if this action can execute when called.</param>
        </member>
        <member name="E:JSR.BaseClassLibrary.DelegateCommandParam.CanExecuteChanged">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommandParam.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:JSR.BaseClassLibrary.DelegateCommandParam.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:JSR.BaseClassLibrary.OnMessageEventHandler">
            <summary>
            This event handler is raised when a message is raised by an object.
            </summary>
            <param name="sender">Object raiding the message.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="T:JSR.BaseClassLibrary.IMessenger">
            <summary>
            IMessenger raises a PropertyChange notification when a Property called Message is changed.
            </summary>
        </member>
        <member name="E:JSR.BaseClassLibrary.IMessenger.OnMessage">
            <summary>
            Event raised when the Message changes.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.IMessenger.Message">
            <summary>
            Gets the Message to raise.
            </summary>
        </member>
        <member name="T:JSR.BaseClassLibrary.INode`1">
            <summary>
            Interface for Node / Tree structure.
            </summary>
            <typeparam name="T">Type of object contained within the Node.</typeparam>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.IsRoot">
            <summary>
            Gets a value indicating whether this is a root Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.Item">
            <summary>
            Gets or sets the Item managed by this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.Children">
            <summary>
            Gets a list of child Nodes within this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.Parent">
            <summary>
            Gets or sets the Parent to this Node.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.HasChildren">
            <summary>
            Gets a value indicating whether this Node has Child components.
            </summary>
        </member>
        <member name="P:JSR.BaseClassLibrary.INode`1.Root">
            <summary>
            Gets the Root node for the tree that this Node is contained within.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.AddChild(`0,System.Boolean)">
            <summary>
            Adds a new child Node with an Item to the Children collection.
            </summary>
            <param name="item">The Item object within the new Child Node.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.AddChild(JSR.BaseClassLibrary.INode{`0},System.Boolean)">
            <summary>
            Add a Child Node to the Children collection.
            </summary>
            <param name="node">Child Node to add to the Children collection.</param>
            <param name="unique">Only add if the item does not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Add multiple items to the Children collection.
            </summary>
            <param name="items">Items to add.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.AddRange(System.Collections.Generic.IEnumerable{JSR.BaseClassLibrary.INode{`0}},System.Boolean)">
            <summary>
            Add multiple nodes to the Children collection.
            </summary>
            <param name="nodes">Nodes to add.</param>
            <param name="unique">Only add items if they do not exist in the list already.</param>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.GetCount(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get the number of children.
            </summary>
            <param name="recursive">Include all ancestors.</param>
            <param name="unique">Only get the number of unique Items.</param>
            <param name="fromRoot">Get the value from the Root Node.</param>
            <returns>Number of children.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.GetCopy(JSR.BaseClassLibrary.INode{`0},System.Boolean)">
            <summary>
            Gets a new copy of this node.
            </summary>
            <param name="parent">The new parent to assign to the copy.</param>
            <param name="withChildren">Whether the node should come with copies of its children.</param>
            <returns>A copy of this node.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.GetItems(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get a list of the Items in this Node.
            </summary>
            <param name="recursive">Get all ancestor items.</param>
            <param name="unique">Only get one instance of each item.</param>
            <param name="fromRoot">Get items from the Root of this Node's tree.</param>
            <returns>A list of Items in the Node.</returns>
        </member>
        <member name="M:JSR.BaseClassLibrary.INode`1.ItemExists(`0,System.Boolean,System.Boolean)">
            <summary>
            Checks if the items already exists within the tree.
            </summary>
            <param name="item">Item to evaluate.</param>
            <param name="recursive">Check all ancestors.</param>
            <param name="fromRoot">Start from the Root Node.</param>
            <returns>True if the item exists.</returns>
        </member>
        <member name="T:JSR.BaseClassLibrary.OnChangedEventHandler">
            <summary>
            This event handler is raised and an IChangeable Object changes.
            </summary>
            <param name="sender">the object sending the event.</param>
            <param name="isChanged">Boolean value stating if the object is changed or not.</param>
        </member>
        <member name="T:JSR.BaseClassLibrary.INotifyChanged">
            <summary>
            IChangableObject implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:System.ComponentModel.IChangeTracking"/>. Also provides an event that raises when the object is changed.
            </summary>
        </member>
        <member name="E:JSR.BaseClassLibrary.INotifyChanged.OnChanged">
            <summary>
            This event is raised when the object's IsChanged value changes.
            </summary>
        </member>
        <member name="T:JSR.BaseClassLibrary.IRequestViewClose">
            <summary>
            Interface for requesting closing a viewmodel.
            </summary>
        </member>
        <member name="E:JSR.BaseClassLibrary.IRequestViewClose.RequestViewCloseEvent">
            <summary>
            Event to request closing a ViewModel within an interface.
            </summary>
        </member>
        <member name="T:JSR.BaseClassLibrary.UI.YesNoCancelEnum">
            <summary>
            Message returns for IYesNoCancelMessage.
            </summary>
        </member>
        <member name="F:JSR.BaseClassLibrary.UI.YesNoCancelEnum.Yes">
            <summary>
            Answer was yes.
            </summary>
        </member>
        <member name="F:JSR.BaseClassLibrary.UI.YesNoCancelEnum.No">
            <summary>
            Answer was no.
            </summary>
        </member>
        <member name="F:JSR.BaseClassLibrary.UI.YesNoCancelEnum.Cancel">
            <summary>
            Answer was cancel.
            </summary>
        </member>
        <member name="T:JSR.BaseClassLibrary.UI.IYesNoCancelMessage">
            <summary>
            An interface for standard message inquiries with yes, no and cancel returns.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.UI.IYesNoCancelMessage.RequestMessage(System.String)">
            <summary>
            Request the user to answer a question using Yes, No or Cancel.
            </summary>
            <param name="message">Message to ask the user.</param>
            <returns>Answer to the question.</returns>
        </member>
        <member name="T:JSR.BaseClassLibrary.ViewModelBase">
            <summary>
            Base ViewModel object for MVVM environments.
            </summary>
        </member>
        <member name="E:JSR.BaseClassLibrary.ViewModelBase.RequestViewCloseEvent">
            <inheritdoc/>
        </member>
        <member name="P:JSR.BaseClassLibrary.ViewModelBase.RequestCloseCommand">
            <summary>
            Gets a command to request the view to close.
            </summary>
        </member>
        <member name="M:JSR.BaseClassLibrary.ViewModelBase.RequestViewClose">
            <summary>
            Request closing this object's ViewModel.
            </summary>
        </member>
    </members>
</doc>
